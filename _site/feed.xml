<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-03T00:15:00-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Frank Noirot</title><subtitle>A simple portfolio site for Frank Noirot, a designer based in Washington DC and NYC.</subtitle><author><name>Frank RJ Noirot</name></author><entry><title type="html">Jekyll Slideshows Using Bootstrap 4 Carousels</title><link href="http://localhost:4000/code/bootstrap-4-carousel-jekyll" rel="alternate" type="text/html" title="Jekyll Slideshows Using Bootstrap 4 Carousels" /><published>2018-11-21T00:00:00-05:00</published><updated>2018-11-21T00:00:00-05:00</updated><id>http://localhost:4000/code/bootstrap-4-carousel-jekyll</id><content type="html" xml:base="http://localhost:4000/code/bootstrap-4-carousel-jekyll">&lt;p&gt;Today I built a little _include file to create slideshows on my Jekyll site that is dead simple, and more importantly to me, that looks clean and readable in Markdown.&lt;/p&gt;

&lt;p&gt;Jekyll’s blogging functionality is wonderful. writing simple Markdown files is so much prettier than HTML pages, and hopefully someday will let me add posts to my static site from my phone’s notepad.&lt;/p&gt;

&lt;p&gt;But I have to constantly fight the urge to just elbow in HTML whenever I want something beyond simple text and images, which seems to be every post I write.&lt;/p&gt;

&lt;p&gt;So when I went to embed my findings presentation into my portfolio post on my Undergraduate Research Thesis, I challenged myself to embed the slideshow with just one line of an include. Here’s my code in action:&lt;/p&gt;

&lt;!--  --&gt;

&lt;style type=&quot;text/css&quot; scoped=&quot;&quot;&gt;
  .carousel-item {
    height: 60vmin;
  }

  
  .slide--1 {
    background: url(/assets/img/osu-crp-thesis-slides/1.jpg);
    background-size: contain;
    background-position: center center;
    background-repeat: no-repeat;
  }
  
  .slide--2 {
    background: url(/assets/img/osu-crp-thesis-slides/2.jpg);
    background-size: contain;
    background-position: center center;
    background-repeat: no-repeat;
  }
  
  .slide--3 {
    background: url(/assets/img/osu-crp-thesis-slides/3.jpg);
    background-size: contain;
    background-position: center center;
    background-repeat: no-repeat;
  }
  
  .slide--4 {
    background: url(/assets/img/osu-crp-thesis-slides/4.jpg);
    background-size: contain;
    background-position: center center;
    background-repeat: no-repeat;
  }
  
  .slide--5 {
    background: url(/assets/img/osu-crp-thesis-slides/5.jpg);
    background-size: contain;
    background-position: center center;
    background-repeat: no-repeat;
  }
  
&lt;/style&gt;

&lt;div id=&quot;bootstrap-4-carousel-jekyll--slideshow--&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;
  &lt;ol class=&quot;carousel-indicators&quot;&gt;
    
    &lt;li data-target=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;
    
    &lt;li data-target=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;
    
    &lt;li data-target=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;
    
    &lt;li data-target=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;
    
    &lt;li data-target=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; data-slide-to=&quot;4&quot;&gt;&lt;/li&gt;
    
  &lt;/ol&gt;
  &lt;div class=&quot;carousel-inner&quot;&gt;
    
    &lt;div class=&quot;carousel-item active slide--1&quot;&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;carousel-item  slide--2&quot;&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;carousel-item  slide--3&quot;&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;carousel-item  slide--4&quot;&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;carousel-item  slide--5&quot;&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;a class=&quot;carousel-control-prev&quot; href=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;
    &lt;span class=&quot;carousel-control-prev-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;
  &lt;/a&gt;
  &lt;a class=&quot;carousel-control-next&quot; href=&quot;#bootstrap-4-carousel-jekyll--slideshow--&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;
    &lt;span class=&quot;carousel-control-next-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;This simple line is the include in my Markdown file:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{% include carousel.html start='1' end='5' %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The secret power of this include file &lt;code class=&quot;highlighter-rouge&quot;&gt;carousel.html&lt;/code&gt; is the YML variables that I’ve tucked into the frontmatter of this Markdown post:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;carousel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;asset_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/assets/img/osu-crp-thesis-slides&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;file_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.jpg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can start to infer what &lt;code class=&quot;highlighter-rouge&quot;&gt;carousel.html&lt;/code&gt; is going to do. It will populate a slider with a series of images in the directory assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;asset_dir&lt;/code&gt;, of which there seem to be &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, and all of them must be &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;In the course of building this I learned that the Liquid language that powers Jekyll &lt;a href=&quot;https://stackoverflow.com/questions/17446472/how-to-list-files-in-a-directory-with-liquid/31885127&quot;&gt;doesn’t have I/O power to read a directory and loop over the contents intelligently&lt;/a&gt;. This is why we have to do the dumb thing and explicitly tell Liquid how many slides we’re going to loop over. However, one cool upshot of this manually defined variable is that excerpting a slideshow is easy. For example, the slideshow above isn’t actually 5 slides, but &lt;strong&gt;49!&lt;/strong&gt; I limited the number of slides rendered by controlling this variable.&lt;/p&gt;

&lt;p&gt;The other side of this system is my directory structure, which is simply naming each file by its slide number, ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;5.jpg&lt;/code&gt;. This will make looping over the images very straightforward, and I still have my images partitioned into different directories so I don’t mind having multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;1.jpg&lt;/code&gt; files across my site.&lt;/p&gt;

&lt;p&gt;Now let’s check out &lt;code class=&quot;highlighter-rouge&quot;&gt;carousel.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% if page.carousel %}
{% capture slideSlug %}{{ page.slug }}--slideshow{% endcapture %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ slideSlug }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel slide&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-ride=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-indicators&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% assign slides = page.carousel.slides %}
    {% for slide in (1..slides) %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{{ slideSlug }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-slide-to=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ slide-1 }}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;slide =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {%  endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-inner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% for slide in (1..slides) %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-item {% if slide == 1 %}active{% endif %}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d-block w-100&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ page.carousel.asset_dir }}/{{ slide }}{{ page.carousel.file_type }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ page.title }} Slideshow: Page {{ forloop.index }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-control-prev&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{{ slideSlug }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-slide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prev&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-control-prev-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-control-next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{{ slideSlug }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-slide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-control-next-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that Jekyll uses HTML peppered with Liquid tags to provide variables and logic. Anywhere you see &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ foo }}&lt;/code&gt; a Liquid variable is being referenced, and &lt;code class=&quot;highlighter-rouge&quot;&gt;{% bar %}&lt;/code&gt; is some Liquid logic, like If statements or For loops.&lt;/p&gt;

&lt;p&gt;The other stuff is HTML, specifically &lt;a href=&quot;https://getbootstrap.com/docs/4.0/components/carousel/#with-indicators&quot;&gt;the Carousel component with controls and indicators from Bootstrap 4&lt;/a&gt;. Click the link; I really just lifted this code straight from there and tweaked it!&lt;/p&gt;

&lt;p&gt;Here’s what my code does to make carousel abstracted to be used on any page with any images:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Make sure the page asking for a carousel has the &lt;code class=&quot;highlighter-rouge&quot;&gt;:carousel&lt;/code&gt; YML variable defined before we start building broken stuff.&lt;/li&gt;
  &lt;li&gt;Name the carousel we’re building by making the id unique by the &lt;code class=&quot;highlighter-rouge&quot;&gt;page.slug&lt;/code&gt; variable&lt;/li&gt;
  &lt;li&gt;Loop over the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements that power the carousel by iterating over the range &lt;code class=&quot;highlighter-rouge&quot;&gt;(1..page.carousel.slides)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In a new loop for the inner contents of the carousel, iterate over the same range. This time we grab our images by concatenating &lt;code class=&quot;highlighter-rouge&quot;&gt;page.carousel.asset_dir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slide&lt;/code&gt; (which is an index number), and &lt;code class=&quot;highlighter-rouge&quot;&gt;page.carousel.file_type&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re using Jekyll and Bootstrap 4 for your website, feel free to use the code above to create your own slideshow pipeline without any external plugins! If you’re an experienced developer, &lt;a href=&quot;mailto:frank@franknoirot.co&quot;&gt;let me know&lt;/a&gt; if I’m doing anything that looks like nails on a chalkboard to you. I’m still learning this web development stuff!&lt;/p&gt;</content><author><name>Frank RJ Noirot</name></author><summary type="html">Today I built a little _include file to create slideshows on my Jekyll site that is dead simple, and more importantly to me, that looks clean and readable in Markdown.</summary></entry><entry><title type="html">Scrubbable Shapes</title><link href="http://localhost:4000/code/scrubbable-shapes" rel="alternate" type="text/html" title="Scrubbable Shapes" /><published>2018-11-01T00:00:00-04:00</published><updated>2018-11-01T00:00:00-04:00</updated><id>http://localhost:4000/code/scrubbable-shapes</id><content type="html" xml:base="http://localhost:4000/code/scrubbable-shapes">&lt;p&gt;Brett Victor’s work has been on my mind a lot this week. His essay &lt;em&gt;&lt;a href=&quot;http://worrydream.com/#!2/LadderOfAbstraction&quot;&gt;Up And Down The Ladder of Abstraction&lt;/a&gt;&lt;/em&gt; is something I consider a must-read, and his &lt;a href=&quot;http://worrydream.com/ScrubbingCalculator/&quot;&gt;Scrubbing Calculator&lt;/a&gt; essay as a part of the series &lt;a href=&quot;http://worrydream.com/#!/KillMath&quot;&gt;Kill Math&lt;/a&gt; is filled with tons of specific visual user experience questions I’d like to explore, because to my surprise not much attention seems to have been paid it since 2011.&lt;/p&gt;

&lt;p&gt;First among them is the &lt;em&gt;scrub&lt;/em&gt; gesture for which the essay is named. In his proposed visual math system, any number on the screen can be adjusted either with the keyboard, or by clicking and dragging on the value: scrubbing. He proposes that making this gesture native, along with several much more novel interactions like linking values together, would make our math more embodied, and maybe help more people digest mathematical concepts. Here’s a video from &lt;em&gt;Scrubbing Calculator&lt;/em&gt; showing how it works:&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1rem;&quot;&gt;
	&lt;video id=&quot;va&quot; style=&quot;width: 100%; max-width: 420px; max-height: 100;&quot; controls=&quot;&quot; autoplay=&quot;&quot;&gt;
		&lt;source src=&quot;http://worrydream.com/ScrubbingCalculator/Movies/TripAdjust.mov&quot; type=&quot;video/quicktime&quot; /&gt;
		&lt;source src=&quot;http://worrydream.com/ScrubbingCalculator/Movies/TripAdjust.webm&quot; type=&quot;video/webm&quot; /&gt;
	&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;I agree that there is something to explore here. So with some guidance from &lt;a href=&quot;http://mnielsen.github.io/notes/kill_math/kill_math.html&quot;&gt;Michael Nielsen’s notes on Victor’s essay&lt;/a&gt; I’d like to explore some of those small, specific questions lurking in the scrub gesture.&lt;/p&gt;

&lt;p&gt;I’m no mathematician, but I do make things that deal with a lot of geometry. So here I’ll be exploring what scrubbing can offer shapes. My first thought is that they can be used to drive the dimensions of a shape or drawing in a curated way as &lt;em&gt;sketch dimensions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I make furniture pretty often, and I would like to start doing the occasional commissioned piece. &lt;strong&gt;Wouldn’t it be cool if I could let customers tweak a some of a furniture design’s dimensions live with a simple scrub of a value?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe just my kind of cool? Whatever, I’m still gonna make it.&lt;/p&gt;

&lt;p&gt;Eventually I will make this into a tool for &lt;a href=&quot;http://threejs.org&quot;&gt;THREE.js&lt;/a&gt;, where I can embed annotations into whichever dimensions I want, and the user will be able to tweak while viewing in 3D. But we can build to that from a 2D. So let’s start with the simplest geometry: a line.&lt;/p&gt;

&lt;p&gt;To scrub the width of the line, simply click and drag on the variable name! You can tweak &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; in smaller increments by holding &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd&lt;/code&gt; on Mac) before clicking and dragging.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;lineChart&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/scrubbable-line.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;this-essay-is-still-under-construction&quot;&gt;This essay is still under construction!&lt;/h3&gt;
&lt;p&gt;From here on out is my &lt;em&gt;pseudocode&lt;/em&gt; for the next steps I want to take. Along the way, I’ll be abstracting out the javascript to work for arbitrary SVG elements, but for now it is &lt;em&gt;&lt;a href=&quot;/assets/js/scrubbable-line.js&quot;&gt;nasty&lt;/a&gt;&lt;/em&gt;. Wish me luck!&lt;/p&gt;

&lt;p&gt;…To change from scrub to tweak on mobile, do what I call “pin &amp;amp; drag”. Pin the variable by holding a finger on it, then drag with another.&lt;/p&gt;

&lt;p&gt;Next, let’s control a rectangle with two scrubbers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;//insert scrubbable rectangle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because this is built up in a modular way, we can now tweak &lt;strong&gt;an arbitrary number of variables on a 2D graphic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;// insert front of desk outline with scrubbable variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This UI has a bit more going on behind the scenes. Before the annotation renders, it first determines how much space it has to unfold. if there’s no room for a full brace and variable name, it collapses to a small pin with &lt;code class=&quot;highlighter-rouge&quot;&gt;fx&lt;/code&gt; inside to show this dimension is scrubbable. Let me know if it’s intuitive to use!&lt;/p&gt;

&lt;p&gt;One more piece makes this a viable first step for my custom furniture tool. Three tabs labelled &lt;em&gt;Top, Front, &amp;amp; Side&lt;/em&gt; allow me to get at least a good proxy representation of the 3D piece, and the variable scrubbing affects dimensions between the different panes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;//insert three pane furniture scrubber&lt;/em&gt;&lt;/p&gt;</content><author><name>Frank RJ Noirot</name></author><summary type="html">Let's explore how Bret Victor's work on mathematical UX applies to geometry generated with D3.js.</summary></entry><entry><title type="html">Understanding Geometry with D3.js</title><link href="http://localhost:4000/code/understanding-geomtery-with-d3js" rel="alternate" type="text/html" title="Understanding Geometry with D3.js" /><published>2018-10-29T00:00:00-04:00</published><updated>2018-10-29T00:00:00-04:00</updated><id>http://localhost:4000/code/understanding-geomtery-with-d3js</id><content type="html" xml:base="http://localhost:4000/code/understanding-geomtery-with-d3js">&lt;p&gt;In my internet wanderings I came across a Wiki page on a geometry principle known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Thales%27s_theorem&quot;&gt;Thales’s Theorem&lt;/a&gt;. It caught my eye because its creator inspired the name of one of the &lt;a href=&quot;https://www.thalesgroup.com/en&quot;&gt;biggest partners&lt;/a&gt; of my employer, &lt;a href=&quot;https://iridium.com&quot;&gt;Iridium Satellite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This little toy application was made using only CSS and &lt;a href=&quot;http://d3js.org/&quot;&gt;D3.js&lt;/a&gt; Drag the three points around the circle to get used to how the system works!&lt;/p&gt;

&lt;hr /&gt;

&lt;p data-height=&quot;600&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;BqxzRv&quot; data-default-tab=&quot;result&quot; data-user=&quot;franknoirot&quot; data-pen-title=&quot;Thales Theorem&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/franknoirot/pen/BqxzRv/&quot;&gt;Thales Theorem&lt;/a&gt; by Frank Noirot (&lt;a href=&quot;https://codepen.io/franknoirot&quot;&gt;@franknoirot&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;Before we get to Thales, lets describe the general version of his theorem, which is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inscribed_angle_theorem&quot;&gt;Inscribed Angle Theorem&lt;/a&gt;. It’s definition is super wonky, but its &lt;em&gt;implication&lt;/em&gt; is that for any triangle inscribed into a circle, sweeping one angle along the circle while keeping the other two points fixed, &lt;strong&gt;the sweeping angle will always stay the same!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Isn’t that kind of wild? Maybe its because my school skipped Geometry for my year (true story), but this blew my mind in the small way things do when you glimpse a deep true mathematical relationship.&lt;/p&gt;

&lt;p&gt;Now that you’ve got the general case of the sweeping angle down, I want you to pull a Thales and position one side of the triangle so that it runs straight through the dot in the center of the circle. &lt;strong&gt;The angle across from that line will always be exactly 90°!&lt;/strong&gt; Whew, people are so smart. But there’s more to explore here.&lt;/p&gt;

&lt;p&gt;Notice, for example that the angle you sweep along the circle &lt;em&gt;always stays the same, not just for the 90° case mentioned above&lt;/em&gt;. This is called the , which is the more generalized case of the one posed by Thales.&lt;/p&gt;

&lt;p&gt;Or notice how in essence, the sweeping angle is in some ways &lt;em&gt;a simple proportion of the circle that is bisected by the line across it&lt;/em&gt;. The more of the circle chopped across by a side of the triangle, the bigger the angle across from it, approaching but never reaching 180°. This sideles into the fundamental nature of how cosine and sine relate triangles to circles, and for the first time I felt those concepts in a visceral way.&lt;/p&gt;

&lt;p&gt;This was a blast of a little project to work on. Not only did I start to learn about optimizing code, and abstraction principles, but I am understanding what gets &lt;a href=&quot;http://worrydream.com/LadderOfAbstraction/&quot;&gt;Bret Victor&lt;/a&gt; &lt;a href=&quot;https://dynamicland.org/&quot;&gt;so excited&lt;/a&gt; about what he calls &lt;a href=&quot;http://worrydream.com/#!/MediaForThinkingTheUnthinkable&quot;&gt;“The Dynamic Medium”&lt;/a&gt;. Now when I fall down the Wiki rabbit hole, I’m looking for new systems that I can better understand through interactivity. &lt;a href=&quot;mailto:frank@franknoirot.co&quot;&gt;Let me know&lt;/a&gt; if you’ve found anything you want to model!&lt;/p&gt;</content><author><name>Frank RJ Noirot</name></author><summary type="html">Recently in my internet wanderings I came across a Wiki page on a geometry principle known as Thales's Theorem.</summary></entry><entry><title type="html">I’m Changing My Name</title><link href="http://localhost:4000/write/im-changing-my-name" rel="alternate" type="text/html" title="I'm Changing My Name" /><published>2018-10-27T00:00:00-04:00</published><updated>2018-10-27T00:00:00-04:00</updated><id>http://localhost:4000/write/im-changing-my-name</id><content type="html" xml:base="http://localhost:4000/write/im-changing-my-name">&lt;p&gt;On December 1st, 2018 I will be starting the process of changing my legal name from &lt;em&gt;Frank Richard Johnson&lt;/em&gt; to &lt;em&gt;Francis Richard Johnson Noirot&lt;/em&gt;. I have been using my mother’s maiden name in various pseudonymous ways, but I’m finally making it official. I consider it my first major act of designing myself and my life. Here are the few reasons that I’m making the jump:&lt;/p&gt;
&lt;h2 id=&quot;1-having-a-formalized-version-of-a-first-name-is-the-best&quot;&gt;1. Having a formalized version of a first name is the best&lt;/h2&gt;
&lt;p&gt;I’m staking a lifelong position here: every person ought to have a name with both formal and casual versions. Quote me on it. My frustration with an official name like Frank has mounted with every missed understanding, every time my name magically became a bark or “Brent” in the space between my mouth and my audience’s ears. I’m sure all my fellow 1-syllable-namers can concur: the 2-syllable name is a godsend for introductions.&lt;/p&gt;
&lt;h2 id=&quot;2-nor--ō&quot;&gt;2. /&lt;em&gt;nor · ‘ō&lt;/em&gt;/&lt;/h2&gt;
&lt;p&gt;My maternal family name is just so cool to say in the French manner. Truthfully, my entire family pronouces it  in the Americanized /’nor · ot/). But my uncle Kevin and I like to have more fun with it.&lt;/p&gt;
&lt;h2 id=&quot;3-choosing-my-family-history&quot;&gt;3. Choosing my family history&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Francis Richard Johnson → Lawrence Richard Johnson → Lawrence Richard Johnson Jr → Frank Richard Johnson&lt;/em&gt;
This is the line of my name, starting with my paternal great-grandfather and coming down to me. Each of the men in this list saw or felt their father’s abuse, was broken by it, and then abused their own family in time. My dad told me once, when I was 19, that he thinks we have a family curse.&lt;/p&gt;

&lt;p&gt;But I don’t think that’s how history works.&lt;/p&gt;

&lt;p&gt;I’m changing my name to point toward the man I want to be. That is a man after my mother, Melodi Ann Noirot (later Pilz), who raised three kids while trying to raise a husband, who taught her troubled son macreme and how to breathe. After my grandmother, Lois Darlene Meekins (later Noirot), who is the very essence of the word “dignified”. They are the story I want to be a part of.&lt;/p&gt;

&lt;p&gt;I also get to have the same &lt;a href=&quot;https://www.instagram.com/franknoirot&quot;&gt;instagram&lt;/a&gt;, &lt;a href=&quot;https://github.com/franknoirot&quot;&gt;github&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/franknoirot&quot;&gt;twitter&lt;/a&gt; handles, so that’s pretty nice too.&lt;/p&gt;</content><author><name>Frank RJ Noirot</name></author><summary type="html">On December 1st, 2018 I will be starting the process of changing my legal name from Frank Richard Johnson to Francis Richard Johnson Noirot.</summary></entry></feed>