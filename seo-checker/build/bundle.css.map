{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte'\n\tlet postText = ''\n\tlet keywords = []\n\tlet keywordsMatchCount = []\n\n\tconst wordLength = 6\n\t$: wordCount = postText.split(' ').reduce((acc, word) => acc + ((word.length < wordLength) ? 1 : Math.floor(word.length / wordLength)), 0)\n\t$: postHTML = parseHTML(postText, keywords)\n\n\tfunction parseHTML(htmlString, keywordArr) {\n\t\t\n\t\tkeywordsMatchCount = keywords.map(x => 0)\n\n\t\tfor (let i=0; i<keywordArr.length; i++) {\n\t\t\tif (!keywordArr[i]) continue\n\t\t\tif (keywordArr[i].length > 0) {\n\t\t\t\thtmlString = highlightKeyword(htmlString, keywordArr[i], i)\n\t\t\t}\n\t\t}\n\n\n\t\treturn htmlString\n\t\t? htmlString.replace('<script', '')\n\t\t\t.split('\\n').map(paragraph => (`<p>${paragraph}</p>`))\n\t\t\t.join('')\n\t\t: ''\n\t}\n\n\tfunction highlightKeyword(htmlString, keyword, index) {\n\t\tconst keywordReplaced = keyword.replace(/\\s+/gi, '[^\\\\w]+')\n\t\tconst rgx = new RegExp(keywordReplaced, 'gi')\n\t\treturn htmlString.replace(rgx, function(match) {\n\t\t\tkeywordsMatchCount[index]++\n\t\t\tkeywordsMatchCount = [...keywordsMatchCount]\n\t\t\treturn `<span class='keyword ${ (index === 0) ? 'focus' : '' }'>${ match }</span>`\n\t\t})\n\t}\n\n</script>\n\n<main>\n\t<h1>SEO Checker</h1>\n\t<section class='input-fields'>\n\t\t<div>\n\t\t\t<label for='focus-keyword'>Focus Keyword</label>\n\t\t\t<input id='focus-keyword' type='text' on:input={e => { keywords[0] = e.target.value }} />\n\t\t</div>\n\t\t<div>\n\t\t\t<label for='ancillary-keyword'>Ancillary Keywords</label>\n\t\t\t<input id='ancillary-keyword' type='text' on:input={e => { keywords = [ keywords[0], ...e.target.value.split(',').map(str => str.trim())] }} />\n\t\t</div>\n\t\t<div>\n\t\t\t<label for='post-text'>Post Text</label>\n\t\t\t<textarea id='post-text' on:input={ e => { postText = e.target.value }} />\n\t\t</div>\n\t</section>\n\t<section class='results'>\n\t\t<p><strong>Word Count: </strong>\n\t\t\t{ wordCount }\n\t\t</p>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Keyword</th>\n\t\t\t\t\t<th>Count</th>\n\t\t\t\t\t<th>Density</th>\n\t\t\t\t</tr>\n\t\t\t\t{#each keywords as keyword, i ('keywords-'+i)}\n\t\t\t\t<tr>\n\t\t\t\t\t<td>{ keyword }</td>\n\t\t\t\t\t<td class='right-align'>{ keywordsMatchCount[i] }</td>\n\t\t\t\t\t<td class='right-align'>{ (keywordsMatchCount[i] / wordCount * 100).toFixed(2) + '%' }</td>\n\t\t\t\t</tr>\n\t\t\t\t{/each}\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t<td class='right-align'>{ keywordsMatchCount.reduce((acc, count) => acc + count, 0) }</td>\n\t\t\t\t\t<td class='right-align'>{ (keywordsMatchCount.reduce((acc, count) => acc + count, 0) / wordCount * 100).toFixed(2) + '%' }</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</section>\n\t<section class='post-content'>\n\t\t{@html postHTML}\n\t</section>\n</main>\n\n<style>\n\tmain {\n\t\tbox-sizing: border-box;\n\t\tpadding: 1em 20vw;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\tp {\n\t\tmax-width: 75ch;\n\t}\n\n</style>"
  ],
  "names": [],
  "mappings": "AAyFC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AAChB,CAAC"
}